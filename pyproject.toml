[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.poetry]
name = "belay"
version = "0.0.0"  # Do not change, let poetry-dynamic-versioning handle it.
homepage = "https://github.com/BrianPugh/belay"
repository = "https://github.com/BrianPugh/belay"
license = "Apache-2.0"
description = ""
authors = ["Brian Pugh"]
readme = "README.rst"
packages = [{include = "belay"}]

[tool.poetry.scripts]
belay = "belay.cli.main:run_app"

[tool.poetry.dependencies]
# Be as loose as possible if writing a library.
python = "^3.8"  # TODO: unrestrict upper bound once Questionary loosens
pyserial = ">=3.1"
typer = {extras = ["all"], version = ">=0.6.0"}
pathspec = ">=0.10.3"
tomli = ">=2.0.1"
autoregistry = ">=0.10.1"
fsspec = {version = ">=2022.11.0", extras = ["http"]}
requests = ">=2.28.1"
gitpython = ">=3.1.30"
pydantic = ">=1.10.4"
typing-extensions = ">=4.5.0"
questionary = ">=1.10.0"
packaging = ">=20.4"

[tool.poetry.group.docs.dependencies]
sphinx = "^4.5.0"
sphinx_rtd_theme = "^1.0.0"

[tool.poetry.group.dev.dependencies]
black = "*"
coverage = "^7.2.3"
poetry-dynamic-versioning = ">=0.16.0, <1.0.0"
pre_commit = "^2.16.0"
pytest = "^7.2.0"
pytest-cov = "^3.0.0"
pytest-mock = "^3.7.0"
pytest-timeout = "^2.1.0"
flaky = "^3.7.0"
ipdb = ">=0.13.13, <1.0.0"

[tool.poetry.group.debug]
optional = true

[tool.poetry.group.debug.dependencies]
ipdb = ">=0.13.9"
line_profiler = "^3.5.1"

[tool.coverage.run]
branch = true
omit = [
    "tests/*",
    "belay/pyboard.py",  # Mostly comes from the MicroPython mpremote project.
    "belay/snippets/*",  # Ignore on-device code-snippets
    "belay/webrepl.py",  # Cannot really be tested, copied from micropython
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",

    # Don't run stuff decorated by belay decorators.
    "@self.task",
    "@device.task",
    "@self.thread",
    "@device.thread",
]

[tool.pytest.ini_options]
addopts = "--import-mode=importlib --max-runs=3 --timeout=120 --force-flaky --no-success-flaky-report"
norecursedirs = "integration"
markers = [
    "network: mark a test that requires network access.",
]

[tool.ruff]
target-version = 'py38'
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
    "examples/",
    "belay/snippets/",
    "tests/test_inspect.py",
    "tests/integration/test_function_decorators_exception.py",
]

ignore = [
    "B905",  # zip strict=True; remove once python <3.10 support is dropped.
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]
line-length = 120  # Must agree with Black

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "PGH001",  # use of "eval"
]
"belay/cli/select.py" = [
    "F821",
    "F841"
]

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "belay.Device.setup",
    "belay.Device.task",
    "belay.Device.teardown",
    "belay.Device.thread",
    "pydantic.validator",
    "pydantic.root_validator",
]
